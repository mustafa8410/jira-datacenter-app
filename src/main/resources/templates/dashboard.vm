<html>
<head>
    <meta charset="UTF-8">
    <title>User Listing</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        tr.clickable-row td:not(:first-child) {
            cursor: pointer;
        }

        .table td:first-child,
        .table th:first-child {
            text-align: center;
        }

        .table td:first-child {
            border-right: 1px solid #dee2e6;
        }
        #pageSizeSelect {
            margin-block-end: 0;
        }

        #jumpToPage.is-invalid { border-color: #dc3545; }
    </style>
</head>
<body class="bg-light">
    <div class="container my-5">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">User Listing</h4>
                    </div>
                    <div class="card-body">

                        <div class="mb-3 d-flex justify-content-start align-items-center">

                            <form class="row g-2 align-items-end mb-3" method="get" action="$contextPath/plugins/servlet/my-plugin-dashboard">
                                <input type="hidden" name="page" value="1"/>
                                <div class="col-auto">
                                    <label class="form-label mb-0">Search:</label>
                                    <input type="text" class="form-control" name="query" placeholder="Username or display name" value="$!query"/>
                                </div>
                                <div class="col-auto">
                                    <label class="form-label mb-0">Inactive:</label>
                                    <select class="form-select" name="inactiveDays">
                                        <option value="" #if(!$inactiveDays)selected#end>Any time</option>
                                        #foreach($d in [30,60,90])
                                            <option value="$d" #if($inactiveDays == $d)selected#end>$d+ days</option>
                                        #end
                                    </select>
                                </div>

                                <div class="col-auto">
                                    <label class="form-label mb-0">Before date:</label>
                                    <input type="date" class="form-control" name="beforeDate" value="$beforeDate"/>
                                </div>

                                <div class="col-auto">
                                    <div class="dropdown" id="groupFilter">
                                        <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                                data-bs-toggle="dropdown" aria-expanded="false" id="groupDropdownBtn">
                                            #if($groups && !$groups.isEmpty())
                                                Groups ($groups.size())
                                            #else
                                                Groups
                                            #end
                                        </button>

                                        <div class="dropdown-menu p-3" style="min-width: 320px;">
                                            <!-- Search box -->
                                            <input type="text" id="groupFilterInput" class="form-control mb-2"
                                                   placeholder="Search groups..." oninput="EV_groups.filterList()"/>

                                            <!-- Quick actions -->
                                            <div class="d-flex justify-content-between mb-2">
                                                <button type="button" class="btn btn-sm btn-light" onclick="EV_groups.selectAllVisible()">Select all</button>
                                                <button type="button" class="btn btn-sm btn-light" onclick="EV_groups.clearAll()">Clear</button>
                                            </div>

                                            <!-- Scrollable checkbox list -->
                                            <div id="groupList" style="max-height: 260px; overflow:auto;">
                                                #set($__idx = 0)
                                                #foreach($g in $groupNames)
                                                    #set($__idx = $__idx + 1)
                                                    #set($checked = $groups && $groups.contains($g))
                                                    <div class="form-check group-item">
                                                        <input class="form-check-input group-chk" type="checkbox" value="$g" id="grp_$__idx" #if($checked)checked#end>
                                                        <label class="form-check-label" for="grp_$__idx">$g</label>
                                                    </div>
                                                #end
                                            </div>

                                            <hr class="my-2"/>

                                            <!-- Group mode (OR / AND) -->
                                            <label class="form-label">Match mode</label>
                                            <select class="form-select form-select-sm mb-2" name="groupMode" id="groupModeSelect">
                                                <option value="OR" #if($groupMode != "AND")selected#end>Any of selected</option>
                                                <option value="AND" #if($groupMode == "AND")selected#end>All selected</option>
                                            </select>

                                            <!-- Hidden field that carries comma-separated group names -->
                                            <input type="hidden" name="groups" id="groupsHiddenInput" value=""/>

                                            <button type="button" class="btn btn-primary w-100" onclick="EV_groups.apply()">Apply groups</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <button type="submit" class="btn btn-primary">Apply</button>
                                </div>
                            </form>
                        </div>

                        #if(!$users || $users.isEmpty())
                            <div class="alert alert-info">
                                No users found for this page. Try different filters.
                            </div>
                        #else
                        <table class="table table-hover align-middle">
                            <thead class="table-light">
                            <tr>
                                <th><input type="checkbox" id="select-all" /></th>
                                <th>Username</th>
                                <th>Display Name</th>
                                <th>Last Login</th>
                                <th class="text-center">Warnings</th>
                            </tr>
                            </thead>
                            <tbody>
                                #foreach ($user in $users)
                                <tr class="clickable-row" data-href="$contextPath/plugins/servlet/my-plugin-user-detail?username=$user.username">
                                    <td class="checkbox-column"><input type="checkbox" class="user-checkbox" value="$user.username"></td>
                                    <td>$user.username</td>
                                    <td>$user.displayName</td>
                                    <td>$user.lastLogin</td>
                                    <td class="text-center">
                                        #if ($user.warnings && $user.warnings.size() > 0)
                                            <span class="text-warning" data-bs-toggle="tooltip" data-bs-html="true"
                                                  title="<ul style='margin:0;padding:0;'>#foreach($w in $user.warnings)<li style='margin-left:-20px;'>$w</li>#end</ul>">
                                                <!-- Custom SVG icon (Font Awesome Triangle Exclamation, bright yellow) -->
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" width="22" height="22" style="vertical-align:middle;" class="warning-sign">
                                                    <path fill="#FFD43B" d="M320 64C334.7 64 348.2 72.1 355.2 85L571.2 485C577.9 497.4 577.6 512.4 570.4 524.5C563.2 536.6 550.1 544 536 544L104 544C89.9 544 76.9 536.6 69.6 524.5C62.3 512.4 62.1 497.4 68.8 485L284.8 85C291.8 72.1 305.3 64 320 64zM320 232C306.7 232 296 242.7 296 256L296 368C296 381.3 306.7 392 320 392C333.3 392 344 381.3 344 368L344 256C344 242.7 333.3 232 320 232zM346.7 448C347.3 438.1 342.4 428.7 333.9 423.5C325.4 418.4 314.7 418.4 306.2 423.5C297.7 428.7 292.8 438.1 293.4 448C292.8 457.9 297.7 467.3 306.2 472.5C314.7 477.6 325.4 477.6 333.9 472.5C342.4 467.3 347.3 457.9 346.7 448z"/>
                                                </svg>
                                            </span>
                                        #end
                                    </td>

                                </tr>
                                #end
                            </tbody>
                        #end
                        </table>

                        #set($window = 2) ## how many pages to show on each side of current page
                        #set($startPage = $currentPage - $window)
                        #set($endPage = $currentPage + $window)
                        #set($previousPage = $currentPage - 1)
                        #set($nextPage = $currentPage + 1)

                        #if($startPage < 2)
                            #set($startPage = 2)
                        #end
                        #if($endPage > $totalPages - 1)
                            #set($endPage = $totalPages - 1)
                        #end

                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">


                                ## Previous
                                #if($currentPage > 1)
                                    <li class="page-item">
                                        <a class="page-link" href="?page=$previousPage&pageSize=$pageSize">Previous</a>
                                    </li>
                                #else
                                    <li class="page-item disabled"><span class="page-link">Previous</span></li>
                                #end

                                ## Always show page 1
                                #if($currentPage == 1)
                                    <li class="page-item active disabled" aria-current="page"><span class="page-link">1</span></li>
                                #else
                                    <li class="page-item"><a class="page-link" href="?page=1&pageSize=$pageSize">1</a></li>
                                #end

                                ## Ellipsis if needed
                                #if($startPage > 2)
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                #end

                                ## Page window
                                #foreach($i in [$startPage..$endPage])
                                    #if($i > 1 && $i < $totalPages)
                                        #if($i == $currentPage)
                                            <li class="page-item active disabled" aria-current="page"><span class="page-link">$i</span></li>
                                        #else
                                            <li class="page-item"><a class="page-link" href="?page=$i&pageSize=$pageSize">$i</a></li>
                                        #end
                                    #end
                                #end

                                ## Ellipsis after window if needed
                                #if($endPage < $totalPages - 1)
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                #end

                                ## Always show last page (if more than 1)
                                #if($totalPages > 1)
                                    #if($currentPage == $totalPages)
                                        <li class="page-item active disabled" aria-current="page"><span class="page-link">$totalPages</span></li>
                                    #else
                                        <li class="page-item"><a class="page-link" href="?page=$totalPages&pageSize=$pageSize">$totalPages</a></li>
                                    #end
                                #end

                                ## Next
                                #if($currentPage < $totalPages)
                                    <li class="page-item"><a class="page-link" href="?page=$nextPage&pageSize=$pageSize">Next</a></li>
                                #else
                                    <li class="page-item disabled"><span class="page-link">Next</span></li>
                                #end

                            </ul>


                        </nav>






                        <form id="bulkForm" method="post" action="$contextPath/plugins/servlet/bulk-action">
                            <input type="hidden" name="selectionMode" id="selectionMode" value="MANUAL"/>
                            <!-- multiple exclude inputs will be appended dynamically when in ALL_FILTERED mode -->
                        </form>


                        <div class="mt-4 text-end d-flex justify-content-between align-items-end mb-1">
                            <div>
                                <div class="d-flex justify-content-center align-items-center">
                                    <label for="jumpToPage" class="me-2 mb-0">Jump to page:</label>
                                    <input type="number" id="jumpToPage" class="form-control" style="width:80px; display:inline-block;" min="1" max="$totalPages" placeholder="Page #" />
                                    <button class="btn btn-outline-primary ms-2" onclick="jumpToPage($totalPages, $pageSize)">Go</button>
                                </div>
                            </div>
                            <div>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Bulk Action
                                    </button>
                                    <ul class="dropdown-menu">
    ##                                    <li>
    ##                                        <a class="dropdown-item" href="#" onclick="return bulkAction('deactivate')">Deactivate Users</a>
    ##                                    </li>
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="return bulkAction('remove-group')">Revoke License (Remove from Group)</a>
                                        </li>
                                        <!-- You can add more actions here -->
                                    </ul>
                                </div>
                                <button class="btn btn-outline-danger ms-2" onclick="clearAllSelections()">Clear Selections</button>
                            </div>
                            <form method="get" id="pageSizeForm">
                                <input type="hidden" name="page" value="$currentPage"/>
                                <label for="pageSizeSelect" class="me-2">Rows per page:</label>
                                <select name="pageSize" id="pageSizeSelect" class="form-select d-inline w-auto"
                                        onchange="this.form.submit()">
                                    #foreach($size in [10,25,50,100])
                                        <option value="$size" #if($pageSize == $size) selected #end>$size</option>
                                    #end
                                    #if($pageSize != 10 && $pageSize != 25 && $pageSize != 50 && $pageSize != 100)
                                        <option value="$pageSize" selected>$pageSize</option>
                                    #end

                                </select>
                            </form>


                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>


<!-- JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>

    let globalSelectAll = JSON.parse(localStorage.getItem('globalSelectAll') || 'false');
    let exclusions = new Set(JSON.parse(localStorage.getItem('exclusions') || '[]')); // users explicitly unchecked in global mode
    // --- Maintain selection state globally ---
    let selectedUsers = new Set(JSON.parse(localStorage.getItem('selectedUsers') || '[]'));

    function updateLocalStorage() {
        localStorage.setItem('selectedUsers', JSON.stringify(Array.from(selectedUsers)));
    }

    function saveGlobalState() {
        localStorage.setItem('globalSelectAll', JSON.stringify(globalSelectAll));
        localStorage.setItem('exclusions', JSON.stringify(Array.from(exclusions)));
    }

    window.totalMatches = $totalMatches;

    // A little banner to inform users when global select-all is active
    function renderGlobalBanner() {
        const container = document.querySelector('.card-body');
        if (!container) return;

        var bar = document.getElementById('globalSelectBar');
        if (!globalSelectAll) {
            if (bar) bar.remove();
            return;
        }
        if (!bar) {
            bar = document.createElement('div');
            bar.id = 'globalSelectBar';
            bar.className = 'alert alert-warning d-flex justify-content-between align-items-center';
            container.prepend(bar);
        }
        var total = (typeof window.totalMatches === 'number') ? window.totalMatches : '';

        var left =
                '<div><strong>Select all across pages is ON.</strong> ' +
                'All <span class="badge bg-dark">' + total + '</span> users matching current filters are selected. ' +
                (exclusions.size ? 'Exclusions: <span class="badge bg-secondary">' + exclusions.size + '</span>' : '') +
                '</div>';

        var right =
                '<div><button type="button" class="btn btn-sm btn-outline-dark" onclick="disableGlobalSelectAll()">Turn off</button></div>';

        bar.innerHTML = left + right;
    }


    function enableGlobalSelectAll() {
        globalSelectAll = true;
        // visually check all on the current page except excluded
        document.querySelectorAll('.user-checkbox').forEach(cb => {
            cb.checked = !exclusions.has(cb.value);
            cb.closest("tr").classList.toggle("selected-row", cb.checked);
        });
        document.getElementById('selectionMode').value = 'ALL_FILTERED';
        const selAllEl = document.getElementById('select-all');
        if (selAllEl) selAllEl.checked = true;
        saveGlobalState();
        renderGlobalBanner();
    }

    function disableGlobalSelectAll() {
        globalSelectAll = false;
        // exclusions.clear();
        document.getElementById('selectionMode').value = 'MANUAL';
        // fall back to per-row manual set (uncheck everything visually, but keep your existing selectedUsers logic)
        document.querySelectorAll('.user-checkbox').forEach(cb => {
            if(!selectedUsers.has(cb.value)) {
                cb.checked = false;
                cb.closest("tr").classList.remove("selected-row");
            }
            else {
                cb.checked = true;
                cb.closest("tr").classList.add("selected-row");
            }
        });
        const selAllEl = document.getElementById('select-all');
        if (selAllEl) selAllEl.checked = false;

        saveGlobalState();
        renderGlobalBanner();
        updateLocalStorage(); // keep your existing selectedUsers store
    }


    // On page navigation, restore checkbox states
    function restoreCheckboxes() {
        if (globalSelectAll) {
            document.querySelectorAll(".user-checkbox").forEach(cb => {
                cb.checked = !exclusions.has(cb.value);
                cb.closest("tr").classList.toggle("selected-row", cb.checked);
            });
            const selAllEl = document.getElementById('select-all');
            if (selAllEl) selAllEl.checked = true; // or false
        } else {
            // original behavior
            document.querySelectorAll(".user-checkbox").forEach(cb => {
                if (selectedUsers.has(cb.value)) {
                    cb.checked = true;
                    cb.closest("tr").classList.add("selected-row");
                } else {
                    cb.checked = false;
                    cb.closest("tr").classList.remove("selected-row");
                }
            });

        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        // --- Clickable row handler ---
        document.querySelectorAll("tr.clickable-row").forEach(row => {
            row.addEventListener("click", function (e) {
                const cb = this.querySelector("input.user-checkbox");
                if (e.target.closest("td:first-child")) {
                    if (e.target === cb) { e.stopPropagation(); return; }
                    cb.checked = !cb.checked;
                    cb.dispatchEvent(new Event('change', { bubbles: true })); // trigger our handler below
                    e.stopPropagation(); return;
                }
                window.location.href = this.dataset.href;
            });
        });

        // --- Tooltips ---
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(el => new bootstrap.Tooltip(el));

        // --- Initial restore (global/manual) ---
        const selAll = document.getElementById('select-all');
        if (globalSelectAll) {
            document.getElementById('selectionMode').value = 'ALL_FILTERED';
            if (selAll) selAll.checked = true;
        } else {
            document.getElementById('selectionMode').value = 'MANUAL';
            if (selAll) selAll.checked = false;
        }

        restoreCheckboxes();
        renderGlobalBanner();

        // --- Header "Select all" toggles global mode ---
        if (selAll) {
            selAll.addEventListener('change', function () {
                if (this.checked) enableGlobalSelectAll();
                else disableGlobalSelectAll();
            });
        }

        // --- Event delegation for per-row checkbox changes ---
        document.addEventListener('change', function (e) {
            if (!(e.target && e.target.classList && e.target.classList.contains('user-checkbox'))) return;

            const cb = e.target;
            const username = cb.value;

            if (globalSelectAll) {
                // In global mode, checkbox means include/exclude this user
                if (cb.checked) {
                    exclusions.delete(username);
                    cb.closest("tr").classList.add("selected-row");
                } else {
                    exclusions.add(username);
                    cb.closest("tr").classList.remove("selected-row");
                }
                saveGlobalState();
                renderGlobalBanner();
            } else {
                // Manual mode: maintain selectedUsers set
                if (cb.checked) selectedUsers.add(username);
                else selectedUsers.delete(username);
                updateLocalStorage();
                cb.closest("tr").classList.toggle("selected-row", cb.checked);
            }
        });
    });

    // --- Bulk action: submit selected usernames across all pages ---
    function bulkAction(action) {

        if (!globalSelectAll && selectedUsers.size === 0) {
            alert("Please select at least one user.");
            return false;
        }
        let confirmMsg = (action === 'remove-group')
                ? "Are you sure you want to revoke licenses (remove from group) for the selected users?"
                : "Proceed with bulk action?";
        if (!confirm(confirmMsg)) return false;

        const form = document.getElementById("bulkForm");
        form.innerHTML = "";

        // set action
        const actionInput = document.createElement("input");
        actionInput.type = "hidden"; actionInput.name = "action"; actionInput.value = action;
        form.appendChild(actionInput);

        // selection mode
        const mode = document.createElement("input");
        mode.type = "hidden"; mode.name = "selectionMode";
        mode.value = globalSelectAll ? "ALL_FILTERED" : "MANUAL";
        form.appendChild(mode);

        if (globalSelectAll) {
            // send only exclusions (the server will resolve the filtered set)
            exclusions.forEach(u => {
                const ex = document.createElement("input");
                ex.type = "hidden"; ex.name = "exclude";
                ex.value = u;
                form.appendChild(ex);
            });
        } else {
            // manual: send selected usernames as before
            selectedUsers.forEach(username => {
                const input = document.createElement("input");
                input.type = "hidden"; input.name = "selectedUsers"; input.value = username;
                form.appendChild(input);
            });
        }

        form.submit();
        // clear only manual selections; keep global state so result page "Back to Dashboard" preserves it
        if (!globalSelectAll) clearAllSelections();
        return false;
    }


    // --- Jump to page ---
    function jumpToPage(totalPages, pageSize) {
        var input = document.getElementById("jumpToPage");
        var page = parseInt(input.value, 10);
        if (isNaN(page) || page < 1 || page > totalPages) {
            input.classList.add("is-invalid");
            input.value = '';
            input.placeholder = "1 - " + totalPages;
            setTimeout(() => input.classList.remove("is-invalid"), 1500);
            return;
        }
        window.location.href = "?page=" + page + "&pageSize=" + pageSize;
    }

    function clearAllSelections() {
        selectedUsers.clear();
        exclusions.clear();
        globalSelectAll = false;
        saveGlobalState();        // persist cleared global state + exclusions
        updateLocalStorage();     // persist cleared manual selection
        document.getElementById('selectionMode').value = 'MANUAL';
        restoreCheckboxes();
        renderGlobalBanner();
        const selAll = document.getElementById('select-all');
        if (selAll) selAll.checked = false;
    }

    const EV_groups = (function() {
        function selectedValues() {
            const vals = [];
            document.querySelectorAll('.group-chk:checked').forEach(chk => vals.push(chk.value));
            return vals;
        }

        function setHiddenFromSelection() {
            const vals = selectedValues();
            const hidden = document.getElementById('groupsHiddenInput');
            if (hidden) hidden.value = vals.join(',');
            updateButtonLabel(vals.length);
        }

        function updateButtonLabel(count) {
            const btn = document.getElementById('groupDropdownBtn');
            if (!btn) return;
            btn.textContent = count > 0 ? `Groups (${count})` : 'Groups';
        }

        function filterList() {
            const q = (document.getElementById('groupFilterInput').value || '').toLowerCase();
            document.querySelectorAll('#groupList .group-item').forEach(div => {
                const name = div.querySelector('label').textContent.toLowerCase();
                div.style.display = name.includes(q) ? '' : 'none';
            });
        }

        function selectAllVisible() {
            document.querySelectorAll('#groupList .group-item').forEach(div => {
                if (div.style.display !== 'none') {
                    const chk = div.querySelector('.group-chk');
                    chk.checked = true;
                }
            });
            setHiddenFromSelection();
        }

        function clearAll() {
            document.querySelectorAll('.group-chk').forEach(chk => chk.checked = false);
            setHiddenFromSelection();
        }

        function apply() {
            setHiddenFromSelection();
            // Close dropdown via Bootstrap API
            const dropdownEl = document.querySelector('#groupFilter [data-bs-toggle="dropdown"]');
            const dd = dropdownEl ? bootstrap.Dropdown.getInstance(dropdownEl) : null;
            if (dd) dd.hide();

            // Reset page to 1 so results start from first page after filter change
            const pageField = document.querySelector('form [name="page"]');
            if (pageField) pageField.value = '1';

            // Submit the outer filter form (closest form ancestor)
            const form = document.getElementById('groupFilter').closest('form');
            if (form) form.submit();
        }

        function init() {
            // Initialize hidden value from server-rendered checkboxes
            setHiddenFromSelection();

            // Keep hidden input in sync on any checkbox change
            document.addEventListener('change', function(e) {
                if (e.target && e.target.classList && e.target.classList.contains('group-chk')) {
                    setHiddenFromSelection();
                }
            });
        }

        return { init, filterList, selectAllVisible, clearAll, apply };
    })();

    // Init after DOM is ready
    document.addEventListener('DOMContentLoaded', EV_groups.init);

</script>

</body>
</html>
